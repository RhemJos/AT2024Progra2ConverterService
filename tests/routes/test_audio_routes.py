#
# @test_audio_routes.py Copyright (c) 2021 Jalasoft.
# 2643 Av Melchor Perez de Olguin, Colquiri Sud, Cochabamba, Bolivia.
# <add direccion de jala la paz>
# All rights reserved. #
# This software is the confidential and proprietary information of
# Jalasoft, ("Confidential Information"). You shall not
# disclose such Confidential Information and shall use it only in
# accordance with the terms of the license agreement you entered into
# with Jalasoft.
#

import unittest
from io import BytesIO
from flask import Flask
from app import audio_blueprint,db
import os

# TODOS
# How to set up a temporal DB for each test (I disabled the DB in app.py to run my tests)
# or how to delete the table contents to start the next test afresh
# How to delete all files generated by the tests. I'm using the output_path in the API response


class TestAudioRoutes(unittest.TestCase):
    # Set up database and routes for audio converter
    @classmethod
    def setUpClass(cls):
        cls.app = Flask(__name__)
        cls.app.config['TESTING'] = True
        cls.app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///:memory:'
        db.init_app(cls.app)
        with cls.app.app_context():
            db.create_all()
        cls.app.register_blueprint(audio_blueprint)
        cls.client = cls.app.test_client()
        cls.app.app_context().push()

    def setUp(self):
        self.output_path=""

    def tearDown(self):
        db.session.reset()
        if os.path.exists(self.output_path):
            os.remove(self.output_path)

    # Positive, with valid audio file and output_format and all parameters
    def test_audio_route_success(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "bit_rate": "32K",
                "channels": "2",
                "sample_rate": "8000",
                "volume": "0.5",
                "language_channel": "0",
                "speed": "1.2"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format no parameters
    def test_audio_route_valid_audio_and_format_no_parameters(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and bit_rate
    def test_audio_route_valid_audio_and_format_and_bit_rate(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "bit_rate": "32K"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and channels
    def test_audio_route_valid_audio_and_format_and_channels(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "channels": "2"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and sample_rate
    def test_audio_route_valid_audio_and_format_and_sample_rate(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "sample_rate": "8000"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and volume
    def test_audio_route_valid_audio_and_format_and_volume(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "volume": "0.5"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and language_channel
    def test_audio_route_valid_audio_and_format_and_language_channel(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "language_channel": "0"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file and output_format and speed
    def test_audio_route_valid_audio_and_format_and_speed(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {"output_format": "ogg",
                "speed": "1.2"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Positive, with valid audio file no output_format
    def test_audio_route_valid_audio_no_format(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        self.output_path=data['output_path'][1:]
        self.assertEqual(response.status_code, 200)
        self.assertTrue(os.path.exists(self.output_path))
        self.assertEqual(data["message"],"Audio converted successfully.")

    # Negative, with audio as empty file
    def test_audio_route_invalid_audio_empty_file(self):
        audio_path = os.path.join("tests", "routes", "audio.wav")
        data = {}
        data["audio"] = (BytesIO(b""), "audio.wav")
        response = self.client.post("/convert-audio",
                                    data=data,
                                    content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with audio file which extension was changed
    # jpg --> wav, image does not contain audio and an exception is raised
    def test_audio_route_invalid_audio_image_extension_changed(self):
        audio_path = os.path.join("tests", "routes", "JPG.wav")
        data = {}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "JPG.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    #  --FALSE NEGATIVE-- Negative, with audio file which extension was changed
    #  mp4 --> wav, video contains audio and gets recognized as audio, but it should not
    def test_audio_route_invalid_audio_video_extension_changed(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "MP4.wav")
        data = {}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "MP4.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with audio file which extension was changed - pdf file
    def test_audio_route_invalid_audio_file_extension_changed_pdf(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "PDF.wav")
        data = {}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "MP4.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with audio file corrupted
    def test_audio_route_invalid_audio_corrupted(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "corrupt.wav")
        data = {}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "MP4.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid output_format
    def test_audio_route_with_invalid_output_format(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"output_format": "invalid_output_format"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid bit_rate
    def test_audio_route_with_invalid_bit_rate(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"bit_rate": "invalid_bit_rate"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid channels
    def test_audio_route_with_invalid_channels(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"channels": "invalid_channels"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid sample_rate
    def test_audio_route_with_invalid_sample_rate(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"sample_rate": "invalid_sample_rate"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid volume
    def test_audio_route_with_invalid_volume(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"volume": "invalid_volume"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

    # Negative, with invalid language_channel
    def test_audio_route_with_invalid_language_channel(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"language_channel": "invalid_language_channel"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],
                         "Something went wrong with the audio conversion: ffmpeg error (see stderr output for detail)")

# NOTE - speed has two different error messages when the input is string and when it exceeds the [0.5,2.0] limit
    # Negative, with invalid speed string
    def test_audio_route_with_invalid_speed(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"speed": "invalid_speed"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Audio conversion failed.")

    # Negative, with invalid speed number
    def test_audio_route_with_invalid_speed_number(self):
        audio_path = os.path.join("tests", "converters", "audio_to_audio", "audio.wav")
        data = {"speed": "3"}
        with open(audio_path, "rb") as f:
            data["audio"] = (f, "audio.wav")
            response = self.client.post("/convert-audio",
                                        data=data,
                                        content_type='multipart/form-data')
        data = response.get_json()
        print(data)
        self.assertEqual(response.status_code, 500)
        self.assertEqual(data["error"],"Error building audio options")
